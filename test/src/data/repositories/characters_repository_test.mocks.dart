// Mocks generated by Mockito 5.4.4 from annotations
// in im_mottu_mobile/test/src/data/repositories/characters_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:im_mottu_mobile/src/data/datasources/remote/remote_data_source.dart'
    as _i4;
import 'package:im_mottu_mobile/src/data/models/character_data_wrapper_model/character_data_wrapper_model.dart'
    as _i2;
import 'package:im_mottu_mobile/src/data/models/comic_data_wrapper_model/comic_data_wrapper_model.dart'
    as _i3;
import 'package:im_mottu_mobile/src/data/models/enums/order_by_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharacterDataWrapperModel_0 extends _i1.SmartFake
    implements _i2.CharacterDataWrapperModel {
  _FakeCharacterDataWrapperModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComicDataWrapperModel_1 extends _i1.SmartFake
    implements _i3.ComicDataWrapperModel {
  _FakeComicDataWrapperModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i4.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.CharacterDataWrapperModel> getCharacters({
    int? offset,
    int? limit,
    String? nameStartsWith,
    _i6.OrderByModel? orderBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
          {
            #offset: offset,
            #limit: limit,
            #nameStartsWith: nameStartsWith,
            #orderBy: orderBy,
          },
        ),
        returnValue: _i5.Future<_i2.CharacterDataWrapperModel>.value(
            _FakeCharacterDataWrapperModel_0(
          this,
          Invocation.method(
            #getCharacters,
            [],
            {
              #offset: offset,
              #limit: limit,
              #nameStartsWith: nameStartsWith,
              #orderBy: orderBy,
            },
          ),
        )),
      ) as _i5.Future<_i2.CharacterDataWrapperModel>);

  @override
  _i5.Future<_i2.CharacterDataWrapperModel> getCharactersByComic({
    required int? comicId,
    int? offset = 0,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharactersByComic,
          [],
          {
            #comicId: comicId,
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<_i2.CharacterDataWrapperModel>.value(
            _FakeCharacterDataWrapperModel_0(
          this,
          Invocation.method(
            #getCharactersByComic,
            [],
            {
              #comicId: comicId,
              #offset: offset,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i2.CharacterDataWrapperModel>);

  @override
  _i5.Future<_i3.ComicDataWrapperModel> getComicsByCharacter(
          int? characterId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComicsByCharacter,
          [characterId],
        ),
        returnValue: _i5.Future<_i3.ComicDataWrapperModel>.value(
            _FakeComicDataWrapperModel_1(
          this,
          Invocation.method(
            #getComicsByCharacter,
            [characterId],
          ),
        )),
      ) as _i5.Future<_i3.ComicDataWrapperModel>);

  @override
  _i5.Future<_i2.CharacterDataWrapperModel> getRelatedCharacters(
          int? characterId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelatedCharacters,
          [characterId],
        ),
        returnValue: _i5.Future<_i2.CharacterDataWrapperModel>.value(
            _FakeCharacterDataWrapperModel_0(
          this,
          Invocation.method(
            #getRelatedCharacters,
            [characterId],
          ),
        )),
      ) as _i5.Future<_i2.CharacterDataWrapperModel>);
}
